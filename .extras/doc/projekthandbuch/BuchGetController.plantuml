@startuml Controller-Klasse

interface Promise<T>

package @nestjs/common {
  class "@Controller" as Controller
  hide Controller circle

  class "@Get" as Get
  hide Get circle

  class "@Req" as Req
  hide Req circle

  class "@Res" as Res
  hide Res circle

  class "@Param" as Param
  hide Param circle

  class "@Query" as Query
  hide Query circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle
}

package express {
  class Request
  class Response

  Response .[hidden].> Controller
}

package auto {
  package entity #FFFFFF {
    class Auto <<entity>>
  }

  package service {
    class AutoReadService << control >>
  }

  package rest #DDDDDD {
    class AutoQuery

    class AutoGetController <<control>> <<@Controller()>> <<@UseInterceptors()>> {
      + @Get(':id') async getById(id: number, req: Request, version: string, res: Response): Promise<Response<Auto | undefined>>
      + @Get() async get(query: AutoQuery, req: Request, res: Response): Promise<Response<Auto[] | undefined>>
      + @Get('/file/:id') async getFileById(id: number, res: Response): Promise<StreamableFile>
    }

    AutoGetController o--> "1" AutoReadService : service

    AutoGetController ..> Controller
    AutoGetController ..> Request
    AutoGetController ..> Response
    AutoGetController ..> Promise
    AutoGetController .up.> Auto
    AutoGetController .up.> AutoQuery

    AutoReadService .[hidden].> Request
    AutoReadService .[hidden].> Promise
    Response .right[hidden].> Controller
  }
}

hide empty members

footer (c) JÃ¼rgen Zimmermann

@enduml
